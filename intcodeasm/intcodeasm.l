%top{
#include "intcodeasm.tab.hh"    /* Generated by bison. */
#include "location.hh"  /* Generated by bison %locations. */
#include "position.hh"  /* Generated by ?? */
#include "util.h"
%}

/* https://github.com/Genivia/RE-flex */


%o fast freespace case-insensitive header-file
%option bison-complete
%option bison-cc-namespace=yy
%option bison-cc-parser=parser
%option bison-locations

/* throw an exception in the scanner's default rule */
%option exception="yy::parser::syntax_error(location(), \"Unknown token.\")"

%option namespace=yy

%class{
 protected:
	bool 	need_eol;
%}

%init {
	need_eol = true;
%}

space				[ \t]+
identifier			[a-zA-Z_][a-zA-Z0-9_$]*
decimal_integer		[0-9]+
hex_integer			0x[0-9A-Fa-f]+
integer				{hex_integer}|{decimal_integer}
eol					\r?\n

%x COMMENT

%%

{eol}				{ return yy::parser::make_EOL(location()); }
{space}				{ /* ignore */ }
;					{ start(COMMENT); }

BP 					{ return yy::parser::make_KEYWORD_BP(location()); }

ADD |
MUL |
INP |
OUT |
JNZ |
JZ  |
CMPLT |
CMPEQ |
ABP |
HALT				{ return yy::parser::make_MNEMONIC(str(), location()); }

DI 					{ return yy::parser::make_KEYWORD_DI(location()); }


{identifier}		{ return yy::parser::make_IDENTIFIER(str(), location()); }
[][,+:()-]			{ return yy::parser::symbol_type(text()[0], location()); }
{integer}			{ return yy::parser::make_INTEGER(util::string_to_intmax(text(), 10), location()); }

<COMMENT>{
{eol}				{ start(INITIAL); return yy::parser::make_EOL(location()); }
[^\n]+				{ /* ignore */ }
}

<*>.				{ throw yy::parser::syntax_error(location(), "Unexpected character"); }

<<EOF>> {
	if (need_eol) { need_eol = false; return yy::parser::make_EOL(location()); }
	return yy::parser::symbol_type(0, location());
}

%%
